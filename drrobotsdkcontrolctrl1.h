#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CDrrobotsdkcontrolctrl1 wrapper class

class CDrrobotsdkcontrolctrl1 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CDrrobotsdkcontrolctrl1)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xBA13A8F8, 0x8612, 0x4A93, { 0xA0, 0x9C, 0x3D, 0xFA, 0xC0, 0xD3, 0xAA, 0xCF } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

// _DDrRobotSentinel

// Functions
//

	short GetSensorSonar1()
	{
		short result;
		InvokeHelper(0x5, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorSonar2()
	{
		short result;
		InvokeHelper(0x6, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorSonar3()
	{
		short result;
		InvokeHelper(0x7, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorSonar4()
	{
		short result;
		InvokeHelper(0x8, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorSonar5()
	{
		short result;
		InvokeHelper(0x9, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorSonar6()
	{
		short result;
		InvokeHelper(0xa, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorHumanMotion1()
	{
		short result;
		InvokeHelper(0xb, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorHumanAlarm2()
	{
		short result;
		InvokeHelper(0xc, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorHumanMotion2()
	{
		short result;
		InvokeHelper(0xd, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorTiltingX()
	{
		short result;
		InvokeHelper(0xe, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorTiltingY()
	{
		short result;
		InvokeHelper(0xf, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorOverheatAD1()
	{
		short result;
		InvokeHelper(0x10, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorOverheatAD2()
	{
		short result;
		InvokeHelper(0x11, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorTemperature()
	{
		short result;
		InvokeHelper(0x12, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorIRRange()
	{
		short result;
		InvokeHelper(0x13, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorBatteryAD1()
	{
		short result;
		InvokeHelper(0x14, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorBatteryAD2()
	{
		short result;
		InvokeHelper(0x15, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorRefVoltage()
	{
		short result;
		InvokeHelper(0x16, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	void EnableDcMotor(short channel)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel);
	}
	void DisableDcMotor(short channel)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x18, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel);
	}
	void EnableServo(short channel)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel);
	}
	void DisableServo(short channel)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel);
	}
	void SetDcMotorTrajectoryPlan(short channel, short tranPlanMethod)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel, tranPlanMethod);
	}
	void SetDcMotorSensorFilter(short channel, short filterMethod)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel, filterMethod);
	}
	void SetDcMotorSensorUsage(short channel, short sensorType)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel, sensorType);
	}
	void SetDcMotorControlMode(short channel, short controlMode)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel, controlMode);
	}
	void DcMotorPositionTimeCtr(short channel, short cmdValue, short timePeriod)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel, cmdValue, timePeriod);
	}
	void DcMotorPositionNonTimeCtr(short channel, short cmdValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x20, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel, cmdValue);
	}
	void DcMotorPwmTimeCtr(short channel, short cmdValue, short timePeriod)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x21, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel, cmdValue, timePeriod);
	}
	void DcMotorPwmNonTimeCtr(short channel, short cmdValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x22, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel, cmdValue);
	}
	void ServoTimeCtr(short channel, short cmdValue, short timePeriods)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x23, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel, cmdValue, timePeriods);
	}
	void servoNonTimeCtr(short channel, short cmdValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x24, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel, cmdValue);
	}
	short GetSensorPot(short channel)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x25, DISPATCH_METHOD, VT_I2, (void*)&result, parms, channel);
		return result;
	}
	void PlayAudioFile(LPCTSTR fileName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x26, DISPATCH_METHOD, VT_EMPTY, NULL, parms, fileName);
	}
	void TakePhoto()
	{
		InvokeHelper(0x27, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void Refresh()
	{
		InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL SavePhotoAsBMP(LPCTSTR fileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x28, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, fileName);
		return result;
	}
	void ServoTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6, short timePeriods)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x29, DISPATCH_METHOD, VT_EMPTY, NULL, parms, cmd1, cmd2, cmd3, cmd4, cmd5, cmd6, timePeriods);
	}
	short GetSensorHumanAlarm1()
	{
		short result;
		InvokeHelper(0x2a, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorIRCode1()
	{
		short result;
		InvokeHelper(0x2b, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorIRCode2()
	{
		short result;
		InvokeHelper(0x2c, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorIRCode3()
	{
		short result;
		InvokeHelper(0x2d, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorIRCode4()
	{
		short result;
		InvokeHelper(0x2e, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	void DcMotorPositionNonTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x2f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, cmd1, cmd2, cmd3, cmd4, cmd5, cmd6);
	}
	void DcMotorPositionTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6, short timePeriods)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x30, DISPATCH_METHOD, VT_EMPTY, NULL, parms, cmd1, cmd2, cmd3, cmd4, cmd5, cmd6, timePeriods);
	}
	void SetDcMotorPositionControlPID(short channel, short Kp, short Kd, short Ki)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x31, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel, Kp, Kd, Ki);
	}
	void StartRecord(short voiceSegment)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x32, DISPATCH_METHOD, VT_EMPTY, NULL, parms, voiceSegment);
	}
	void StopRecord()
	{
		InvokeHelper(0x33, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long GetVoiceSegment()
	{
		long result;
		InvokeHelper(0x34, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	void ServoNoTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x35, DISPATCH_METHOD, VT_EMPTY, NULL, parms, cmd1, cmd2, cmd3, cmd4, cmd5, cmd6);
	}
	void DcMotorPwmNonTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x36, DISPATCH_METHOD, VT_EMPTY, NULL, parms, cmd1, cmd2, cmd3, cmd4, cmd5, cmd6);
	}
	void DcMotorPwmTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6, short timePeriods)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x37, DISPATCH_METHOD, VT_EMPTY, NULL, parms, cmd1, cmd2, cmd3, cmd4, cmd5, cmd6, timePeriods);
	}
	void DcMotorVelocityNonTimeCtr(short channel, short cmdValue)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x38, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel, cmdValue);
	}
	void DcMotorVelocityNonTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x39, DISPATCH_METHOD, VT_EMPTY, NULL, parms, cmd1, cmd2, cmd3, cmd4, cmd5, cmd6);
	}
	void DcMotorVelocityTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6, short timePeriods)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x3a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, cmd1, cmd2, cmd3, cmd4, cmd5, cmd6, timePeriods);
	}
	void DcMotorVelocityTimeCtr(short channel, short cmdValue, short timePeriods)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x3b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel, cmdValue, timePeriods);
	}
	void SetDcMotorVelocityControlPID(short channel, short Kp, short Kd, short Ki)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x3c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel, Kp, Kd, Ki);
	}
	long GetImageAddress()
	{
		long result;
		InvokeHelper(0x3d, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	void StopAudioPlay()
	{
		InvokeHelper(0x3e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long GetImageYDataAddress()
	{
		long result;
		InvokeHelper(0x3f, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	void LcdDisplayPMS(LPCTSTR bmpFileName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x40, DISPATCH_METHOD, VT_EMPTY, NULL, parms, bmpFileName);
	}
	short GetSensorPotVoltage()
	{
		short result;
		InvokeHelper(0x41, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorBatteryAD3()
	{
		short result;
		InvokeHelper(0x42, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorPot1()
	{
		short result;
		InvokeHelper(0x43, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorPot2()
	{
		short result;
		InvokeHelper(0x44, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorPot3()
	{
		short result;
		InvokeHelper(0x45, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorPot4()
	{
		short result;
		InvokeHelper(0x46, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorPot5()
	{
		short result;
		InvokeHelper(0x47, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorPot6()
	{
		short result;
		InvokeHelper(0x48, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	void SetServoTrajectoryPlan(short channel, short tranPlanMethod)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x49, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel, tranPlanMethod);
	}
	void SetCustomDOUT(short dout)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x4a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, dout);
	}
	short GetCustomDIN()
	{
		short result;
		InvokeHelper(0x4b, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetCustomAD1()
	{
		short result;
		InvokeHelper(0x4c, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetCustomAD2()
	{
		short result;
		InvokeHelper(0x4d, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetCustomAD3()
	{
		short result;
		InvokeHelper(0x4e, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetCustomAD4()
	{
		short result;
		InvokeHelper(0x4f, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetCustomAD5()
	{
		short result;
		InvokeHelper(0x50, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetCustomAD6()
	{
		short result;
		InvokeHelper(0x51, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetCustomAD7()
	{
		short result;
		InvokeHelper(0x52, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetCustomAD8()
	{
		short result;
		InvokeHelper(0x53, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	void SystemMotorSensorRequest(short Packets)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x54, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Packets);
	}
	void SystemStandardSensorRequest(short Packets)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x55, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Packets);
	}
	void SystemCustomSensorRequest(short Packets)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x56, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Packets);
	}
	void SetSysMotorSensorPeriod(short PeriodTime)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x57, DISPATCH_METHOD, VT_EMPTY, NULL, parms, PeriodTime);
	}
	void SetSysStandardSensorPeriod(short PeriodTime)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x58, DISPATCH_METHOD, VT_EMPTY, NULL, parms, PeriodTime);
	}
	void SetSysCustomSensorPeriod(short PeriodTime)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x59, DISPATCH_METHOD, VT_EMPTY, NULL, parms, PeriodTime);
	}
	void EnableMotorSensorSending()
	{
		InvokeHelper(0x5a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void EnableStandardSensorSending()
	{
		InvokeHelper(0x5b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void EnableCustomSensorSending()
	{
		InvokeHelper(0x5c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void DisableMotorSensorSending()
	{
		InvokeHelper(0x5d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void DisableStandardSensorSending()
	{
		InvokeHelper(0x5e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void DisableCustomSensorSending()
	{
		InvokeHelper(0x5f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void SetSysAllSensorPeriod(short PeriodTime)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x60, DISPATCH_METHOD, VT_EMPTY, NULL, parms, PeriodTime);
	}
	void SystemAllSensorRequest(short Packets)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x61, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Packets);
	}
	void EnableAllSensorSending()
	{
		InvokeHelper(0x62, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void DisableAllSensorSending()
	{
		InvokeHelper(0x63, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long GetVoiceSegLength()
	{
		long result;
		InvokeHelper(0x64, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	void SetInfraredControlOutput(short low, short high)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x65, DISPATCH_METHOD, VT_EMPTY, NULL, parms, low, high);
	}
	short GetMotorCurrent1()
	{
		short result;
		InvokeHelper(0x66, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetMotorCurrent2()
	{
		short result;
		InvokeHelper(0x67, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetMotorCurrent3()
	{
		short result;
		InvokeHelper(0x68, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetMotorCurrent4()
	{
		short result;
		InvokeHelper(0x69, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetMotorCurrent5()
	{
		short result;
		InvokeHelper(0x6a, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetMotorCurrent6()
	{
		short result;
		InvokeHelper(0x6b, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetEncoderPulse1()
	{
		short result;
		InvokeHelper(0x6c, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetEncoderSpeed1()
	{
		short result;
		InvokeHelper(0x6d, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetEncoderPulse2()
	{
		short result;
		InvokeHelper(0x6e, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetEncoderSpeed2()
	{
		short result;
		InvokeHelper(0x6f, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetEncoderDir1()
	{
		short result;
		InvokeHelper(0x70, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetEncoderDir2()
	{
		short result;
		InvokeHelper(0x71, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetSensorSonar(short channel)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x72, DISPATCH_METHOD, VT_I2, (void*)&result, parms, channel);
		return result;
	}
	short GetMotorCurrent(short channel)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x73, DISPATCH_METHOD, VT_I2, (void*)&result, parms, channel);
		return result;
	}
	short GetCustomAD(short channel)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x74, DISPATCH_METHOD, VT_I2, (void*)&result, parms, channel);
		return result;
	}
	void SetMotorPolarity1(short Polarity)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Polarity);
	}
	void SetMotorPolarity2(short Polarity)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x76, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Polarity);
	}
	void SetMotorPolarity3(short Polarity)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x77, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Polarity);
	}
	void SetMotorPolarity4(short Polarity)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x78, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Polarity);
	}
	void SetMotorPolarity5(short Polarity)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x79, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Polarity);
	}
	void SetMotorPolarity6(short Polarity)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x7a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Polarity);
	}
	void SetMotorPolarity(short channel, short Polarity)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x7b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel, Polarity);
	}
	void EnableBumperProtection()
	{
		InvokeHelper(0x7c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void DisableBumperProtection()
	{
		InvokeHelper(0x7d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void LcdDisplayPMB(LPCTSTR bmpFileName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x7e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, bmpFileName);
	}
	void SuspendDcMotor(short channel)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x7f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel);
	}
	void ResumeDcMotor(short channel)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x80, DISPATCH_METHOD, VT_EMPTY, NULL, parms, channel);
	}
	void connectRobot(LPCTSTR robotName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x81, DISPATCH_METHOD, VT_EMPTY, NULL, parms, robotName);
	}
	long GetVoiceData(long VoicePtr)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x82, DISPATCH_METHOD, VT_I4, (void*)&result, parms, VoicePtr);
		return result;
	}
	short getSenID1()
	{
		short result;
		InvokeHelper(0x83, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short getSenID2()
	{
		short result;
		InvokeHelper(0x84, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short getSenID3()
	{
		short result;
		InvokeHelper(0x85, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short getSenID4()
	{
		short result;
		InvokeHelper(0x86, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetGPS01()
	{
		short result;
		InvokeHelper(0x87, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetGPS02()
	{
		short result;
		InvokeHelper(0x88, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetGPS03()
	{
		short result;
		InvokeHelper(0x89, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetGPS04()
	{
		short result;
		InvokeHelper(0x8a, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetGPS05()
	{
		short result;
		InvokeHelper(0x8b, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetGPS06()
	{
		short result;
		InvokeHelper(0x8c, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetGPS07()
	{
		short result;
		InvokeHelper(0x8d, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetGPS08()
	{
		short result;
		InvokeHelper(0x8e, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	void SetGPSID(short ID1, short ID2, short ID3, short ID4)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x8f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ID1, ID2, ID3, ID4);
	}
	short GetVolRef()
	{
		short result;
		InvokeHelper(0x90, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetBat1Vol()
	{
		short result;
		InvokeHelper(0x91, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetBat1Temp()
	{
		short result;
		InvokeHelper(0x92, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetBat2Vol()
	{
		short result;
		InvokeHelper(0x93, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetBat2Temp()
	{
		short result;
		InvokeHelper(0x94, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetDCINVol()
	{
		short result;
		InvokeHelper(0x95, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetCHGPath()
	{
		short result;
		InvokeHelper(0x96, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetPowerPath()
	{
		short result;
		InvokeHelper(0x97, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetCHGStatus()
	{
		short result;
		InvokeHelper(0x98, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	void SendCmdCHG(short cmdPower)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x99, DISPATCH_METHOD, VT_EMPTY, NULL, parms, cmdPower);
	}
	void ChgCtrl(short currentCtrl)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x9a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, currentCtrl);
	}
	void DCMotorFricComp(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x9b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, cmd1, cmd2, cmd3, cmd4, cmd5, cmd6);
	}
	void SetDCFricComp(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 ;
		InvokeHelper(0x9c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, cmd1, cmd2, cmd3, cmd4, cmd5, cmd6);
	}
	short GetEncoderPulse4()
	{
		short result;
		InvokeHelper(0x9d, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetEncoderSpeed4()
	{
		short result;
		InvokeHelper(0x9e, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetEncoderDir4()
	{
		short result;
		InvokeHelper(0x9f, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetEncoderPulse5()
	{
		short result;
		InvokeHelper(0xa0, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetEncoderSpeed5()
	{
		short result;
		InvokeHelper(0xa1, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetEncoderDir5()
	{
		short result;
		InvokeHelper(0xa2, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetMotorPWMValue1()
	{
		short result;
		InvokeHelper(0xa3, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetMotorPWMValue2()
	{
		short result;
		InvokeHelper(0xa4, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetMotorPWMValue3()
	{
		short result;
		InvokeHelper(0xa5, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetMotorPWMValue4()
	{
		short result;
		InvokeHelper(0xa6, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetMotorPWMValue5()
	{
		short result;
		InvokeHelper(0xa7, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetMotorPWMValue6()
	{
		short result;
		InvokeHelper(0xa8, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}

// Properties
//

long GetVoiceSegmentLength()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}
void SetVoiceSegmentLength(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}
CString GetrobotName()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}
void SetrobotName(CString propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}
long Gettest()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}
void Settest(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}
CString GettestStr()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}
void SettestStr(CString propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}


};
