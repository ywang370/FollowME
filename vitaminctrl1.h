#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CVitaminctrl1 wrapper class

class CVitaminctrl1 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CVitaminctrl1)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x70EDCF63, 0xCA7E, 0x4812, { 0x85, 0x28, 0xDA, 0x1E, 0xA2, 0xFD, 0x53, 0xB6 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:
enum
{
    eAVINone = 0,
    eAVIStop = 1,
    eAVIRecord = 2
}EAVIRecordState;
enum
{
    esrv2KServer = 0,
    esrv3KServer = 1,
    esrv456KServer = 2,
    esrv7KServer = 3,
    esrv2KServer4Ch = 4,
    esrv7KDualStream = 5
}EServerModelType;
enum
{
    eVideoSignalOff = 0,
    eVideoSignalOn = 1
}EVideoSignalState;
enum
{
    eConnVideo = 1,
    eConnAudio = 2
}EConnectionType;
enum
{
    eTalking = 1,
    eNonTalking = 2
}ETalkStatus;
enum
{
    eViCodecMJpeg = 1,
    eViCodecSP = 2,
    eViCodecSHM = 3,
    eViCodecH264 = 4
}EVideoCodecType;
enum
{
    eProtNone = 0,
    eProtUDP = 1,
    eProtTCP = 2,
    eProtHTTP = 3,
    eProtMulticast = 4
}EConnProtocol;
enum
{
    eRtspStateNone = 0,
    eRtspStatePlayBefore = 1,
    eRtspStatePlay = 2,
    eRtspStatePause = 3
}ERtspState;
enum
{
    clickNone = 0,
    clickHandleSelf = 1,
    clickSendEvent = 2,
    clickHandleSendEvent = 3
}EClickEventHandler;
enum
{
    eTimeFmtNormal = 0,
    eTimeFmtTwelves = 1,
    eTimeFmtUser = 2
}EDisplayTimeFormat;
enum
{
    eCtrlNoCtrlBar = 0,
    eCtrlNormal = 1,
    eCtrlMotion = 2,
    eCtrlMaskEdit = 4,
    eCtrlMaskEdit3D = 5
}EControlType;
enum
{
    eBtnAuto = 0,
    eBtnPauseStop = 1,
    eBtnStopOnly = 2
}EPanelBtnStyle;
enum
{
    eStream1 = 0,
    eStream2 = 1,
    eStream3 = 2,
    eStream4 = 3,
    eStreamLast = 3
}EDualStreamOption;
enum
{
    eHttpProxyNone = 0,
    eHttpProxySet = 1,
    eHttpProxyIE = 2
}EHttpProxyType;
enum
{
    eMediaNone = 0,
    eMediaVideo = 1,
    eMediaAudio = 2,
    eMediaAV = 3
}EMediaType;
enum
{
    eTalkBtnToggle = 1,
    eTalkBtnPush = 2
}ETalkBtnStyle;
enum
{
    evsz2KHalf = 1,
    evsz2KNormal = 2,
    evsz2KDouble = 3
}EVideoSize2K;
enum
{
    evqua2KMedium = 1,
    evqua2KStandard = 2,
    evqua2KGood = 3,
    evqua2KDetailed = 4,
    evqua2KExcellent = 5
}EVideoQuality2K;
enum
{
    ePicFmtJpeg = 1,
    ePicFmtBmp = 2,
    ePicFmtYUY2 = 3,
    ePicFmtRaw24 = 4,
    ePicFmtIYUV = 5,
    ePicFmtYV12 = 6
}EPictureFormat;
enum
{
    eAuCodecLow = 1,
    eAuCodecMobile = 2,
    eAuCodecStandard = 3,
    eAuCodecStereo = 4
}EAudioCodecType;
enum
{
    eStOpStreaming = 1,
    eStOpSingleJpeg = 2
}EStreamingOption;
enum
{
    eRegLocalMachine = 0,
    eRegCurrentUser = 1
}ERegistryRoot;
enum
{
    ctrlStopped = 0,
    ctrlConnecting = 1,
    ctrlRunning = 2,
    ctrlDisconnecting = 3,
    ctrlReConnecting = 4,
    ctrlConnectionBroken = 5
}EControlStatus;
enum
{
    ePanSpeed = 1,
    eTiltSpeed = 2,
    eZoomSpeed = 3,
    eFocusSpeed = 4,
    eAutoPanPatrolSpeed = 5
}ESpeedType;
enum
{
    eMDAlertWin1 = 1,
    eMDAlertWin2 = 2,
    eMDAlertWin3 = 4,
    eDILow1 = 256,
    eDILow2 = 512,
    eDILow3 = 1024,
    eDILow4 = 2048,
    eDIHigh1 = 65536,
    eDIHigh2 = 131072,
    eDIHigh3 = 262144,
    eDIHigh4 = 524288,
    eDIRise1 = 2097152,
    eDIRise2 = 4194304,
    eDIRise3 = 8388608,
    eDIRise4 = 16777216,
    eDIFall1 = 33554432,
    eDIFall2 = 67108864,
    eDIFall3 = 134217728,
    eDIFall4 = 268435456
}EDBRecordEventType;
enum
{
    eStatusDiskFull = 1,
    eStatusDBRepairFinish = 2,
    eStatusLocRepairFinish = 3,
    eStatusNeedRepair = 4,
    eStatusRecordStart = 5,
    eStatusRecordStop = 6,
    eStatusSizeLimited = 7
}EDBStatusCode;
enum
{
    eptzPTZOnOff = 1,
    eptzPTZBuiltIn = 2,
    eptzPTZPan = 4,
    eptzPTZTilt = 8,
    eptzPTZZoom = 16,
    eptzPTZFocus = 32
}EPTZEnableFlag;
enum
{
    eCfgSystemResetSystem = 0,
    eCfgSystemSerialNumber = 2,
    eCfgSystemCurrentDate = 3,
    eCfgSystemCurrentTime = 4,
    eCfgSystemFirmwareVersion = 6,
    eCfgSystemPTZEnable1 = 8,
    eCfgSystemUserName = 14,
    eCfgSystemUserPwssword = 15,
    eCfgVideoCaptionText = 101
}EServerConfig;
enum
{
    ebutDigitalZoom = 1,
    ebutAVIConvert = 2,
    ebutTalk = 4,
    ebutRtspPlayStop = 8,
    ebutPlayVolume = 16,
    ebutMicVolume = 32,
    ebutRtspSlider = 64,
    ebutMP4Convert = 128
}EControlButtonState;
enum
{
    eFontStyleRegular = 0,
    eFontStyleBold = 1,
    eFontStyleItalic = 2,
    eFontStyleBoldItalic = 3,
    eFontStyleUnderline = 4,
    eFontStyleStrikeout = 8
}EFontStyle;


// Operations
public:

// IVitaminCtrl

// Functions
//

	CString get_Url()
	{
		CString result;
		InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Url(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_RemoteIPAddr()
	{
		CString result;
		InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_RemoteIPAddr(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_CurrentControlCam()
	{
		long result;
		InvokeHelper(0xc9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_CurrentControlCam(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xc9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_StreamingBufferTime()
	{
		long result;
		InvokeHelper(0x34b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_StreamingBufferTime(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x34b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_AntiTearing()
	{
		BOOL result;
		InvokeHelper(0x34e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AntiTearing(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x34e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Url2()
	{
		CString result;
		InvokeHelper(0x34f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Url2(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x34f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void put_IgnoreSSLCertificate(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x331, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_IgnoreSSLCertificate()
	{
		BOOL result;
		InvokeHelper(0x331, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_EnableSSL(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x332, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_EnableSSL()
	{
		BOOL result;
		InvokeHelper(0x332, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	CString get_GetMaskEditParmUrl()
	{
		CString result;
		InvokeHelper(0x100, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_GetMaskEditParmUrl(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x100, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_SetMaskEditParmUrl()
	{
		CString result;
		InvokeHelper(0x101, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_SetMaskEditParmUrl(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x101, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_DarwinExtraPath()
	{
		CString result;
		InvokeHelper(0x342, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_DarwinExtraPath(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x342, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_FlipMaskWnd()
	{
		BOOL result;
		InvokeHelper(0x33e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_FlipMaskWnd(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x33e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_MirrorMaskaWnd()
	{
		BOOL result;
		InvokeHelper(0x33f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_MirrorMaskaWnd(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x33f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_EnableMD()
	{
		BOOL result;
		InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_EnableMD(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void put_GetMD(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_GetMD()
	{
		CString result;
		InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_SetMD()
	{
		CString result;
		InvokeHelper(0x1e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_SetMD(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x1e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_GetMDParmUrl()
	{
		CString result;
		InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_GetMDParmUrl(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_SetMDParmUrl()
	{
		CString result;
		InvokeHelper(0x1f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_SetMDParmUrl(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x1f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_MDEditMode()
	{
		BOOL result;
		InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_MDEditMode(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x15, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_PlayVolume()
	{
		long result;
		InvokeHelper(0xdf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_PlayVolume(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xdf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_PlayMute()
	{
		BOOL result;
		InvokeHelper(0xe0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_PlayMute(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0xe0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long OpenVolumeEditWnd()
	{
		long result;
		InvokeHelper(0x147, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_ClickEventHandler()
	{
		long result;
		InvokeHelper(0x1d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_ClickEventHandler(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x1d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_WheelEventHandler()
	{
		BOOL result;
		InvokeHelper(0xe5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_WheelEventHandler(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0xe5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_BeRightClickEventHandler()
	{
		BOOL result;
		InvokeHelper(0x118, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_BeRightClickEventHandler(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x118, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_EnableJoystick()
	{
		BOOL result;
		InvokeHelper(0x333, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_EnableJoystick(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x333, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_UpdateJoystickInterval()
	{
		long result;
		InvokeHelper(0x334, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_UpdateJoystickInterval(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x334, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_JoystickSpeedLvs()
	{
		long result;
		InvokeHelper(0x335, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_JoystickSpeedLvs(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x335, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_DigitalZoomEnableChk()
	{
		BOOL result;
		InvokeHelper(0x5f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_DigitalZoomEnableChk(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x5f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long OpenDigitalZoomEditWnd()
	{
		long result;
		InvokeHelper(0x146, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_DigitalZoomFactor()
	{
		long result;
		InvokeHelper(0x60, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_DigitalZoomFactor(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x60, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_DigitalZoomX()
	{
		long result;
		InvokeHelper(0x61, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_DigitalZoomX(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x61, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_DigitalZoomY()
	{
		long result;
		InvokeHelper(0x62, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_DigitalZoomY(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x62, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_DigitalZoomEnabled()
	{
		BOOL result;
		InvokeHelper(0x63, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_DigitalZoomEnabled(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_MaxDigitalZoomFactor()
	{
		long result;
		InvokeHelper(0x350, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_MaxDigitalZoomFactor(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x350, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_ControlPort()
	{
		long result;
		InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_ControlPort(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Language()
	{
		CString result;
		InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_Language(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x14, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_Stretch()
	{
		BOOL result;
		InvokeHelper(0x20, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_Stretch(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_Deblocking()
	{
		BOOL result;
		InvokeHelper(0x28, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_Deblocking(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x28, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_UserDateFormat()
	{
		BOOL result;
		InvokeHelper(0x5b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_UserDateFormat(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x5b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_DisplayTimeFormat()
	{
		long result;
		InvokeHelper(0x5c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_DisplayTimeFormat(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x5c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_ControlType()
	{
		long result;
		InvokeHelper(0xca, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_ControlType(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xca, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_Deinterlace()
	{
		BOOL result;
		InvokeHelper(0x336, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_Deinterlace(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x336, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_AutoStartConnection()
	{
		BOOL result;
		InvokeHelper(0x33c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AutoStartConnection(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x33c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_AVIPath()
	{
		CString result;
		InvokeHelper(0xe7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_AVIPath(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xe7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_AVIStatus()
	{
		long result;
		InvokeHelper(0xee, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL get_AutoAVISettings()
	{
		BOOL result;
		InvokeHelper(0xef, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AutoAVISettings(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0xef, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_AVIVideoFrameRate()
	{
		long result;
		InvokeHelper(0xf0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_AVIVideoFrameRate(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xf0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_AVIVideoSizeByStream()
	{
		BOOL result;
		InvokeHelper(0xf1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AVIVideoSizeByStream(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0xf1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_AVIVideoWidth()
	{
		long result;
		InvokeHelper(0xf2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_AVIVideoWidth(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xf2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_AVIVideoHeight()
	{
		long result;
		InvokeHelper(0xf3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_AVIVideoHeight(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xf3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_AVIFilePathName()
	{
		CString result;
		InvokeHelper(0x10c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_AVIFilePathName(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x10c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_AVIManualNaming()
	{
		BOOL result;
		InvokeHelper(0x10d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AVIManualNaming(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x10d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_AVIMaxFileSize()
	{
		long result;
		InvokeHelper(0x10e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_AVIMaxFileSize(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x10e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_AVIMaxFileTimeLength()
	{
		long result;
		InvokeHelper(0x10f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_AVIMaxFileTimeLength(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x10f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_AVIRecordTimeout()
	{
		long result;
		InvokeHelper(0x116, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_AVIRecordTimeout(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x116, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long StartAVIConversion()
	{
		long result;
		InvokeHelper(0x133, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long StopAVIConversion()
	{
		long result;
		InvokeHelper(0x134, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long ChooseAVIVideoCompressor(LPCTSTR bstrDialogTitle)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x135, DISPATCH_METHOD, VT_I4, (void*)&result, parms, bstrDialogTitle);
		return result;
	}
	long ChooseAVIAudioCompressor(LPCTSTR bstrDialogTitle)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x136, DISPATCH_METHOD, VT_I4, (void*)&result, parms, bstrDialogTitle);
		return result;
	}
	BOOL get_MP4Conversion()
	{
		BOOL result;
		InvokeHelper(0x103, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_MP4Conversion(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x103, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_MP4Path()
	{
		CString result;
		InvokeHelper(0x104, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_MP4Path(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x104, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_MP4Prefix()
	{
		CString result;
		InvokeHelper(0x10b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_MP4Prefix(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x10b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_MP4Status()
	{
		long result;
		InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long StartMP4Conversion()
	{
		long result;
		InvokeHelper(0x13c, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long StopMP4Conversion()
	{
		long result;
		InvokeHelper(0x13d, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString get_ControlVersion()
	{
		CString result;
		InvokeHelper(0x34d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	BOOL get_StretchFullScreen()
	{
		BOOL result;
		InvokeHelper(0x349, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_StretchFullScreen(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x349, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_PanelButtonStyle()
	{
		long result;
		InvokeHelper(0xe8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_PanelButtonStyle(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xe8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_NamePassOption()
	{
		BOOL result;
		InvokeHelper(0x110, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_NamePassOption(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x110, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void put_ViewStream(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x125, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_ViewStream()
	{
		long result;
		InvokeHelper(0x125, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_EnableRTSPProxy(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x127, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_EnableRTSPProxy()
	{
		BOOL result;
		InvokeHelper(0x127, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_RTSPProxyAddress(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x128, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_RTSPProxyAddress()
	{
		CString result;
		InvokeHelper(0x128, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_RTSPProxyPort(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x129, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_RTSPProxyPort()
	{
		long result;
		InvokeHelper(0x129, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_HTTPProxyType(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x321, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_HTTPProxyType()
	{
		long result;
		InvokeHelper(0x321, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_HTTPProxyAddress(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x322, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_HTTPProxyAddress()
	{
		CString result;
		InvokeHelper(0x322, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_HTTPProxyPort(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x323, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_HTTPProxyPort()
	{
		long result;
		InvokeHelper(0x323, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_EnableTwoWayAudio(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x12b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_EnableTwoWayAudio()
	{
		BOOL result;
		InvokeHelper(0x12b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_EnableMuteWhenTalk(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x33b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_EnableMuteWhenTalk()
	{
		BOOL result;
		InvokeHelper(0x33b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	long get_MicVolume()
	{
		long result;
		InvokeHelper(0xfb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_MicVolume(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xfb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_MicMute()
	{
		BOOL result;
		InvokeHelper(0xfc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_MicMute(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0xfc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long StartMicTalk()
	{
		long result;
		InvokeHelper(0x190, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long StopMicTalk()
	{
		long result;
		InvokeHelper(0x191, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long OpenMicVolumeEditWnd()
	{
		long result;
		InvokeHelper(0x148, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_HTTPProxyUserName(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x32b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_HTTPProxyUserName()
	{
		CString result;
		InvokeHelper(0x32b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_HTTPProxyPassword(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x32c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_HTTPProxyPassword()
	{
		CString result;
		InvokeHelper(0x32c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	BOOL get_DarwinConnection()
	{
		BOOL result;
		InvokeHelper(0x126, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_DarwinConnection(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x126, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long RtspPlay()
	{
		long result;
		InvokeHelper(0x149, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long RtspPause()
	{
		long result;
		InvokeHelper(0x14a, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long RtspStop()
	{
		long result;
		InvokeHelper(0x14b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString get_DatabasePath()
	{
		CString result;
		InvokeHelper(0x46, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	long get_IndexSize()
	{
		long result;
		InvokeHelper(0x47, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_IndexSize(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x47, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void put_MaxFileSize(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x48, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_MaxFileSize()
	{
		long result;
		InvokeHelper(0x48, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL get_CircularMode()
	{
		BOOL result;
		InvokeHelper(0x49, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_CircularMode(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x49, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Location()
	{
		CString result;
		InvokeHelper(0x4a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	BOOL get_MediaRecord()
	{
		BOOL result;
		InvokeHelper(0x4b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	long get_MaxLocationSize()
	{
		long result;
		InvokeHelper(0x5d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_MaxLocationSize(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x5d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_PreEventTime()
	{
		long result;
		InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_PreEventTime(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_PostEventTime()
	{
		long result;
		InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_PostEventTime(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_EventTypes()
	{
		long result;
		InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_EventTypes(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_IsRecording()
	{
		BOOL result;
		InvokeHelper(0xec, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	long StartMediaRecord(long EMediaType)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x50, DISPATCH_METHOD, VT_I4, (void*)&result, parms, EMediaType);
		return result;
	}
	long StopMediaRecord()
	{
		long result;
		InvokeHelper(0x51, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long SetLocation(LPCTSTR bstrLocation, BOOL bAutoCreate)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BOOL ;
		InvokeHelper(0x52, DISPATCH_METHOD, VT_I4, (void*)&result, parms, bstrLocation, bAutoCreate);
		return result;
	}
	long SetDatabasePath(LPCTSTR newVal, BOOL bAutoCreate)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BOOL ;
		InvokeHelper(0x53, DISPATCH_METHOD, VT_I4, (void*)&result, parms, newVal, bAutoCreate);
		return result;
	}
	long StartMediaRecordEx(long EMediaType, BOOL bEventRecord)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_BOOL ;
		InvokeHelper(0x97, DISPATCH_METHOD, VT_I4, (void*)&result, parms, EMediaType, bEventRecord);
		return result;
	}
	long RepairLocation(LPCTSTR bstrLocation)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x98, DISPATCH_METHOD, VT_I4, (void*)&result, parms, bstrLocation);
		return result;
	}
	long RepairDatabase(LPCTSTR bstrDatabase)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x99, DISPATCH_METHOD, VT_I4, (void*)&result, parms, bstrDatabase);
		return result;
	}
	CString get_RemoteIDStr()
	{
		CString result;
		InvokeHelper(0xdc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_RemoteIDStr(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xdc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void put_TalkButtonStyle(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xdd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_TalkButtonStyle()
	{
		long result;
		InvokeHelper(0xdd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_VideoSize2K()
	{
		long result;
		InvokeHelper(0xf7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_VideoSize2K(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xf7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_VideoQuality2K()
	{
		long result;
		InvokeHelper(0xf8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_VideoQuality2K(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xf8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_ServerConfigSection(long lCfgIndex)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xf9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, lCfgIndex);
		return result;
	}
	CString get_ServerConfigEntry(long lCfgIndex)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xfa, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, lCfgIndex);
		return result;
	}
	long get_ControlButtonOpts()
	{
		long result;
		InvokeHelper(0xfd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_ControlButtonOpts(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xfd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void put_DecodeSnapshot(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x32d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_DecodeSnapshot()
	{
		BOOL result;
		InvokeHelper(0x32d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL get_DisplayErrorMsg()
	{
		BOOL result;
		InvokeHelper(0x2b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_DisplayErrorMsg(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x2b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void put_ConnectionProtocol(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xd0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_ConnectionProtocol()
	{
		long result;
		InvokeHelper(0xd0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_MediaType(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xd4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_MediaType()
	{
		long result;
		InvokeHelper(0xd4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_AudioBitRate()
	{
		long result;
		InvokeHelper(0x25, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_FrameRate()
	{
		long result;
		InvokeHelper(0x26, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_VideoBitRate()
	{
		long result;
		InvokeHelper(0x27, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_HttpPort()
	{
		long result;
		InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_HttpPort(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x12, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_ReadSettingByParam()
	{
		BOOL result;
		InvokeHelper(0x2c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_ReadSettingByParam(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x2c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_IgnoreBorder()
	{
		BOOL result;
		InvokeHelper(0x30, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_IgnoreBorder(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x30, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_IgnoreCaption()
	{
		BOOL result;
		InvokeHelper(0x31, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_IgnoreCaption(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x31, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_DisplayMotionFrame()
	{
		BOOL result;
		InvokeHelper(0xfe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_DisplayMotionFrame(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0xfe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_SnapshotUrl()
	{
		CString result;
		InvokeHelper(0x32f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_ServerModelType(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xf4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_ServerModelType()
	{
		long result;
		InvokeHelper(0xf4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_EffectiveModelType()
	{
		long result;
		InvokeHelper(0x12a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL get_Display()
	{
		BOOL result;
		InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_Display(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_DrawHwnd()
	{
		long result;
		InvokeHelper(0x29, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_DrawHwnd(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x29, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_ForceGDI()
	{
		BOOL result;
		InvokeHelper(0x2d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_ForceGDI(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x2d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_GDIUseStretchBlt()
	{
		BOOL result;
		InvokeHelper(0x2e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_GDIUseStretchBlt(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x2e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_DDrawOnePass()
	{
		BOOL result;
		InvokeHelper(0x2f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_DDrawOnePass(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x2f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_LeftTitleSpace()
	{
		long result;
		InvokeHelper(0xd2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_LeftTitleSpace(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xd2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_RightTitleSpace()
	{
		long result;
		InvokeHelper(0xd3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_RightTitleSpace(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xd3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	unsigned long get_TitleBarColor()
	{
		unsigned long result;
		InvokeHelper(0xd7, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, NULL);
		return result;
	}
	void put_TitleBarColor(unsigned long newValue)
	{
		static BYTE parms[] = VTS_UI4 ;
		InvokeHelper(0xd7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	unsigned long get_TitleTextColor()
	{
		unsigned long result;
		InvokeHelper(0xd8, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, NULL);
		return result;
	}
	void put_TitleTextColor(unsigned long newValue)
	{
		static BYTE parms[] = VTS_UI4 ;
		InvokeHelper(0xd8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_BitmapFile()
	{
		CString result;
		InvokeHelper(0xe9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_BitmapFile(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xe9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_ForceNonYUV()
	{
		BOOL result;
		InvokeHelper(0x102, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_ForceNonYUV(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x102, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_TextOnVideo()
	{
		CString result;
		InvokeHelper(0x106, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	long get_DisplayPeriod()
	{
		long result;
		InvokeHelper(0x107, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_DisplayPeriod(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x107, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_DBHierarchy()
	{
		BOOL result;
		InvokeHelper(0x108, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_DBHierarchy(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x108, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_AutoServerModelType()
	{
		BOOL result;
		InvokeHelper(0x109, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AutoServerModelType(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x109, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_PreBufferMemorySize()
	{
		long result;
		InvokeHelper(0x10a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_PreBufferMemorySize(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x10a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_DisplayLastImage()
	{
		BOOL result;
		InvokeHelper(0x117, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_DisplayLastImage(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x117, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_HideConnectIP()
	{
		BOOL result;
		InvokeHelper(0x119, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_HideConnectIP(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x119, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long GetSnapshot(long eFormat, VARIANT * pvData, VARIANT * pvInfo)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_PVARIANT VTS_PVARIANT ;
		InvokeHelper(0x37, DISPATCH_METHOD, VT_I4, (void*)&result, parms, eFormat, pvData, pvInfo);
		return result;
	}
	long SaveSnapshot(long eFormat, LPCTSTR bstrFileName)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_BSTR ;
		InvokeHelper(0x3d, DISPATCH_METHOD, VT_I4, (void*)&result, parms, eFormat, bstrFileName);
		return result;
	}
	long RestoreControlHandle()
	{
		long result;
		InvokeHelper(0x45, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long SaveSendMail(long nType, LPCTSTR bstrSendTo)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_BSTR ;
		InvokeHelper(0x9a, DISPATCH_METHOD, VT_I4, (void*)&result, parms, nType, bstrSendTo);
		return result;
	}
	long SetBitmapHandle(long lBitmapHandle)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x12e, DISPATCH_METHOD, VT_I4, (void*)&result, parms, lBitmapHandle);
		return result;
	}
	long get_CurrentAudioCodecType()
	{
		long result;
		InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_CurrentAudioPort()
	{
		long result;
		InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_CurrentVideoPort()
	{
		long result;
		InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString get_DigitalInURL()
	{
		CString result;
		InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_DigitalInURL(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_DigitalOutURL()
	{
		CString result;
		InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_DigitalOutURL(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void put_Password(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x16, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_Password()
	{
		CString result;
		InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	long get_ReconnectionWait()
	{
		long result;
		InvokeHelper(0x1a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_ReconnectionWait(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x1a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_AutoReconnect()
	{
		BOOL result;
		InvokeHelper(0x1c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AutoReconnect(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x1c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_UartURL()
	{
		CString result;
		InvokeHelper(0x21, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_UartURL(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x21, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_UserName()
	{
		CString result;
		InvokeHelper(0x22, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_UserName(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x22, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_NotifyNewAudio()
	{
		BOOL result;
		InvokeHelper(0x2a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_NotifyNewAudio(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x2a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_DecodeAV()
	{
		BOOL result;
		InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_DecodeAV(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x64, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_MaxReconnectionCount()
	{
		long result;
		InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_MaxReconnectionCount(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_CurrentVideoCodecType()
	{
		long result;
		InvokeHelper(0xce, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_CurrentMediaType()
	{
		long result;
		InvokeHelper(0xcf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_ConnectionTimeout()
	{
		long result;
		InvokeHelper(0xd1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_ConnectionTimeout(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xd1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_NotifyVideoData()
	{
		BOOL result;
		InvokeHelper(0xd5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_NotifyVideoData(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0xd5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_NotifyImageFormat()
	{
		long result;
		InvokeHelper(0xd6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_NotifyImageFormat(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xd6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void put_StreamingOption(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xd9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_StreamingOption()
	{
		long result;
		InvokeHelper(0xd9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	long get_ControlID()
	{
		long result;
		InvokeHelper(0xda, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_ControlID(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xda, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_ReadWriteTimeout()
	{
		long result;
		InvokeHelper(0xde, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_ReadWriteTimeout(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xde, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_JpegQuality()
	{
		long result;
		InvokeHelper(0xe1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_JpegQuality(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xe1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_JpegSecsPerFrame()
	{
		long result;
		InvokeHelper(0xe2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_JpegSecsPerFrame(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xe2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_JpegURL()
	{
		CString result;
		InvokeHelper(0xe3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_JpegURL(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xe3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long get_RegkeyRoot()
	{
		long result;
		InvokeHelper(0xe4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	void put_RegkeyRoot(long newValue)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xe4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_ServerConfig(long lCfgIndex, long lExtraIdx)
	{
		CString result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0xea, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, lCfgIndex, lExtraIdx);
		return result;
	}
	long get_ControlStatus()
	{
		long result;
		InvokeHelper(0xeb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL get_NotifyAudioPacket()
	{
		BOOL result;
		InvokeHelper(0xf5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_NotifyAudioPacket(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0xf5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_NotifyVideoPacket()
	{
		BOOL result;
		InvokeHelper(0xf6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_NotifyVideoPacket(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0xf6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_RegSubKey()
	{
		CString result;
		InvokeHelper(0xdb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_RegSubKey(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xdb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_ParseIPFromUrl()
	{
		BOOL result;
		InvokeHelper(0x340, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_ParseIPFromUrl(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x340, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long GetConnectionStatus(VARIANT * pvData)
	{
		long result;
		static BYTE parms[] = VTS_PVARIANT ;
		InvokeHelper(0x34, DISPATCH_METHOD, VT_I4, (void*)&result, parms, pvData);
		return result;
	}
	void ClearAvSyncChannel()
	{
		InvokeHelper(0x11b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long GetDigitalIn(long lPort, VARIANT * plData)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_PVARIANT ;
		InvokeHelper(0x35, DISPATCH_METHOD, VT_I4, (void*)&result, parms, lPort, plData);
		return result;
	}
	long RecallPtzPosition(LPCTSTR bstrPos)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x3c, DISPATCH_METHOD, VT_I4, (void*)&result, parms, bstrPos);
		return result;
	}
	long SavePresetPosition(LPCTSTR bstrPosition)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x43, DISPATCH_METHOD, VT_I4, (void*)&result, parms, bstrPosition);
		return result;
	}
	long HttpCommand(LPCTSTR strUrlCommand, BOOL bPost, BOOL bReadData, VARIANT * strRetData)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BOOL VTS_BOOL VTS_PVARIANT ;
		InvokeHelper(0x54, DISPATCH_METHOD, VT_I4, (void*)&result, parms, strUrlCommand, bPost, bReadData, strRetData);
		return result;
	}
	long DelPresetPosition(LPCTSTR bstrPosition)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x57, DISPATCH_METHOD, VT_I4, (void*)&result, parms, bstrPosition);
		return result;
	}
	long GetPtzPresetPosition(VARIANT * pvData)
	{
		long result;
		static BYTE parms[] = VTS_PVARIANT ;
		InvokeHelper(0x36, DISPATCH_METHOD, VT_I4, (void*)&result, parms, pvData);
		return result;
	}
	void CloseConnect()
	{
		InvokeHelper(0x12d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long SendDigitalOut(long lPort, long lValue)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x40, DISPATCH_METHOD, VT_I4, (void*)&result, parms, lPort, lValue);
		return result;
	}
	long SendUartCommand(LPCTSTR bstrCMD, BOOL bFlush, long lPort)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BOOL VTS_I4 ;
		InvokeHelper(0x41, DISPATCH_METHOD, VT_I4, (void*)&result, parms, bstrCMD, bFlush, lPort);
		return result;
	}
	long SendUartCommandBinary(VARIANT vData, BOOL bFlush, long lPort)
	{
		long result;
		static BYTE parms[] = VTS_VARIANT VTS_BOOL VTS_I4 ;
		InvokeHelper(0x42, DISPATCH_METHOD, VT_I4, (void*)&result, parms, &vData, bFlush, lPort);
		return result;
	}
	long SendCameraControlSpeed(long eType, long lSpeed)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x44, DISPATCH_METHOD, VT_I4, (void*)&result, parms, eType, lSpeed);
		return result;
	}
	void hiddenFunction(long eEventType, long eStatusCode, long ePtz, long eCfg, long eRec, long eState)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x96, DISPATCH_METHOD, VT_EMPTY, NULL, parms, eEventType, eStatusCode, ePtz, eCfg, eRec, eState);
	}
	long RefreshServerConfig()
	{
		long result;
		InvokeHelper(0x12f, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long SetServerConfig(long lCfgIndex, long lExtraIdx, LPCTSTR bstrValue)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_BSTR ;
		InvokeHelper(0x130, DISPATCH_METHOD, VT_I4, (void*)&result, parms, lCfgIndex, lExtraIdx, bstrValue);
		return result;
	}
	long UpdateServerConfig()
	{
		long result;
		InvokeHelper(0x131, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long SetServerDateTime(LPCTSTR bstrDate, LPCTSTR bstrTime)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x132, DISPATCH_METHOD, VT_I4, (void*)&result, parms, bstrDate, bstrTime);
		return result;
	}
	long StartPacketInput(long EMediaType)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x137, DISPATCH_METHOD, VT_I4, (void*)&result, parms, EMediaType);
		return result;
	}
	long InputMediaPacket(long lLength, VARIANT * pvPacket)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_PVARIANT ;
		InvokeHelper(0x138, DISPATCH_METHOD, VT_I4, (void*)&result, parms, lLength, pvPacket);
		return result;
	}
	long InputMediaPacketX(long lLength, long lDataPtr)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x139, DISPATCH_METHOD, VT_I4, (void*)&result, parms, lLength, lDataPtr);
		return result;
	}
	long StopPacketInput()
	{
		long result;
		InvokeHelper(0x13a, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long GetUartData(VARIANT * pbstrData, long lReadLen, long lPort, long lTimeout)
	{
		long result;
		static BYTE parms[] = VTS_PVARIANT VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x3a, DISPATCH_METHOD, VT_I4, (void*)&result, parms, pbstrData, lReadLen, lPort, lTimeout);
		return result;
	}
	long GetUartDataBinary(VARIANT * pvData, long lReadLen, long lPort, long lTimeout)
	{
		long result;
		static BYTE parms[] = VTS_PVARIANT VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x3b, DISPATCH_METHOD, VT_I4, (void*)&result, parms, pvData, lReadLen, lPort, lTimeout);
		return result;
	}
	long SendCameraCommand(LPCTSTR bstrCMD, long lTimeout)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_I4 ;
		InvokeHelper(0x3e, DISPATCH_METHOD, VT_I4, (void*)&result, parms, bstrCMD, lTimeout);
		return result;
	}
	long SendCameraCommandMap(long lX, long lY)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x3f, DISPATCH_METHOD, VT_I4, (void*)&result, parms, lX, lY);
		return result;
	}
	long get_CurrentProtocol()
	{
		long result;
		InvokeHelper(0xcd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString get_PresetURL()
	{
		CString result;
		InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_PresetURL(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x17, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_PtzURL()
	{
		CString result;
		InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_PtzURL(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	CString get_RecallURL()
	{
		CString result;
		InvokeHelper(0x19, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void put_RecallURL(LPCTSTR newValue)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x19, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	long Connect()
	{
		long result;
		InvokeHelper(0x32, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	void Disconnect()
	{
		InvokeHelper(0x33, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long SetLangStringHex(long lIndex, LPCTSTR strValue)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_BSTR ;
		InvokeHelper(0x13e, DISPATCH_METHOD, VT_I4, (void*)&result, parms, lIndex, strValue);
		return result;
	}
	long SetGivenLangInfo(long lCodePage, long lFontSize, long lCharSet, BOOL bPitch, BOOL bSwiss, LPCTSTR strFontName)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_BOOL VTS_BOOL VTS_BSTR ;
		InvokeHelper(0x13f, DISPATCH_METHOD, VT_I4, (void*)&result, parms, lCodePage, lFontSize, lCharSet, bPitch, bSwiss, strFontName);
		return result;
	}
	long SetLangString(long lIndex, LPCTSTR strUnicode)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_BSTR ;
		InvokeHelper(0x140, DISPATCH_METHOD, VT_I4, (void*)&result, parms, lIndex, strUnicode);
		return result;
	}
	CString get_EnglishString(long lIndex)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x141, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms, lIndex);
		return result;
	}
	long DisplayStringOnVideo(LPCTSTR strText, long lFontSize, long EFontStyle, long lX, long lY, long lFontColorR, long lFontColorG, long lFontColorB, long lOutlineColorR, long lOutlineColorG, long lOutlineColorB)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x199, DISPATCH_METHOD, VT_I4, (void*)&result, parms, strText, lFontSize, EFontStyle, lX, lY, lFontColorR, lFontColorG, lFontColorB, lOutlineColorR, lOutlineColorG, lOutlineColorB);
		return result;
	}
	long SetFullScreen(BOOL bFullScreen)
	{
		long result;
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x143, DISPATCH_METHOD, VT_I4, (void*)&result, parms, bFullScreen);
		return result;
	}

// Properties
//



};
